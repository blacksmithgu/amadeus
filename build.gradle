buildscript {
    repositories {
        jcenter()
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jooq:jooq-codegen:$jooq_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'application'
    id 'nu.studer.jooq' version '4.2'
    id "com.moowork.node" version "1.3.1"
}

group 'io.meltec.amadeus'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = ['src', 'build/generated-src/jooq/primary']
    main.java.srcDirs = []
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlin-js-wrappers' }
}

dependencies {
    // JOOQ dependencies (both codegen & runtime)
    implementation "org.jooq:jooq:$jooq_version"
    jooqRuntime "org.jooq:jooq-meta-extensions:$jooq_version"

    // sqlite JDBC
    implementation 'org.xerial:sqlite-jdbc:3.32.3'

    // ktor dependencies for all of the various ktor features.
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-html-builder:$ktor_version"
    implementation "org.jetbrains:kotlin-css-jvm:1.0.0-pre.31-kotlin-1.2.41"
    implementation "io.ktor:ktor-server-host-common:$ktor_version"
    implementation "io.ktor:ktor-metrics:$ktor_version"
    implementation "io.ktor:ktor-server-sessions:$ktor_version"
    implementation "io.ktor:ktor-websockets:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"
    implementation "io.ktor:ktor-serialization:$ktor_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
}

jooq {
    version = "$jooq_version"
    edition = 'OSS'
    generateSchemaSourceOnCompilation = true

    primary(sourceSets.main) {
        logging = "WARN"
        generator {
            database {
                name = "org.jooq.meta.extensions.ddl.DDLDatabase"
                properties {
                    property {
                        key = 'scripts'
                        value = 'resources/schema.sql'
                    }
                    property {
                        key = 'sort'
                        value = 'semantic'
                    }
                    property {
                        key = 'unqualifiedSchema'
                        value = 'none'
                    }
                    property {
                        key = 'defaultNameCase'
                        value = 'as_is'
                    }
                    property {
                        key = 'parseIgnoreComments'
                        value = 'true'
                    }
                    property {
                        key = 'parseIgnoreCommentStart'
                        value = '[jooq ignore start]'
                    }
                    property {
                        key = 'parseIgnoreCommentStop'
                        value = '[jooq ignore stop]'
                    }
                }

                forcedTypes {
                    forcedType {
                        name = "LOCALDATETIME"
                        includeExpression = "\\w+_time"
                    }
                }
            }
        }
    }
}

// Need to explicitly add the jooq generated schema files to the kotlin path.
compileKotlin.dependsOn generatePrimaryJooqSchemaSource

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes"]
    }
}

/** Frontend build automation. */

node {
    nodeModulesDir = file("${project.projectDir}/frontend")
}

task copyCss(type: Copy) {
    from "$projectDir/frontend/dist/main.css"
    into "$buildDir/resources/main/static"
}
copyCss.dependsOn npm_run_build
build.dependsOn copyCss
